{"ast":null,"code":"var _jsxFileName = \"D:\\\\CodePractice\\\\TodoList\\\\frontend\\\\demo-app\\\\src\\\\TodoList.js\";\nimport React, { Component, useEffect, useState, Fragment } from 'react';\nimport ListItem from './ListItem';\nimport Dialog from './Dialog';\nimport { getTodos, addTodo, deleteTodo, updateTodo } from \"./api/TodoApi\";\nimport './main.css';\nimport _ from \"lodash\";\n\nconst TodoList = () => {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [list, setList] = useState(null);\n  const [error, setError] = useState(\"\");\n\n  const handleLoadTasks = () => {\n    getTodos().then(response => {\n      setList(response);\n    }).catch(error => {\n      setError(\"Unable to retrieve todo's\");\n    });\n  };\n\n  const handleAddTask = () => {\n    if (inputValue === \"\") return;\n    const newTask = {\n      id: _.parseInt(list.length ? list[list.length - 1].id : 0) + 1,\n      content: inputValue\n    };\n    addTodo(newTask).then(() => {\n      setList([...list, newTask]);\n      setInputValue(\"\");\n    });\n  };\n\n  const handleDeleteTask = id => deleteTodo(id).then(() => {\n    setList(list.filter(item => item.id !== id));\n  });\n\n  const handleUpdateTask = task => {\n    if (task.content === \"\") return;\n    updateTodo(task).then(response => {\n      setList(list.map(x => x.id === response.id ? { ...x,\n        ...response\n      } : x));\n    });\n  };\n\n  useEffect(() => {\n    handleLoadTasks();\n  }, []);\n\n  if (list === null) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    }, \"Tasks is loading ...\");\n  }\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 16\n      }\n    }, error);\n  } // addTask(newitem)\n  // {\n  //     var allTask = this.state.list;\n  //     allTask.push(newitem);\n  //     this.setState({\n  //         list: allTask\n  //     });\n  // }\n  //\n  // updateFinished(todoItem)\n  // {\n  //     var sum = 0;\n  //     this.state.list.forEach((item) => {\n  //         if (item.id === todoItem.id) {\n  //             item.content = todoItem.content;\n  //         }\n  //         sum++;\n  //     });\n  //     this.setState({\n  //         finished: sum\n  //     });\n  // }\n  //\n  // updateTotal(todoItem)\n  // {\n  //     var obj = [], sum = 0;\n  //     this.state.list.forEach((item) => {\n  //         if (item.id !== todoItem.id) {\n  //             obj.push(item);\n  //             sum++;\n  //         }\n  //     });\n  //     this.setState({\n  //         list: obj,\n  //         finished: sum\n  //     });\n  // }\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }, \"TodoList\"), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"task-items\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, this.state.list.map((item, index) => /*#__PURE__*/React.createElement(ListItem, {\n    item: item,\n    finishedChange: this.updateFinished.bind(this),\n    totalChange: this.updateTotal.bind(this),\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(Dialog, {\n    addNewTask: handleAddTask(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default TodoList;","map":{"version":3,"sources":["D:/CodePractice/TodoList/frontend/demo-app/src/TodoList.js"],"names":["React","Component","useEffect","useState","Fragment","ListItem","Dialog","getTodos","addTodo","deleteTodo","updateTodo","_","TodoList","inputValue","setInputValue","list","setList","error","setError","handleLoadTasks","then","response","catch","handleAddTask","newTask","id","parseInt","length","content","handleDeleteTask","filter","item","handleUpdateTask","task","map","x","state","index","updateFinished","bind","updateTotal"],"mappings":"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","sourcesContent":["import React, {Component, useEffect, useState, Fragment} from 'react';\r\nimport ListItem from './ListItem';\r\nimport Dialog from './Dialog';\r\nimport {getTodos, addTodo, deleteTodo, updateTodo} from \"./api/TodoApi\";\r\nimport './main.css';\r\nimport _ from \"lodash\";\r\n\r\nconst TodoList = () => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [list, setList] = useState(null);\r\n    const [error, setError] = useState(\"\");\r\n\r\n\r\n    const handleLoadTasks = () => {\r\n        getTodos()\r\n            .then((response) => {\r\n                setList(response);\r\n            })\r\n            .catch((error) => {\r\n                setError(\"Unable to retrieve todo's\");\r\n            });\r\n    };\r\n\r\n    const handleAddTask = () => {\r\n        if (inputValue === \"\") return;\r\n\r\n        const newTask = {\r\n            id: _.parseInt(list.length ? list[list.length - 1].id : 0) + 1,\r\n            content: inputValue,\r\n        };\r\n\r\n        addTodo(newTask).then(() => {\r\n            setList([...list, newTask]);\r\n            setInputValue(\"\");\r\n        });\r\n    };\r\n\r\n    const handleDeleteTask = (id) =>\r\n        deleteTodo(id).then(() => {\r\n            setList(list.filter((item) => item.id !== id));\r\n        });\r\n\r\n    const handleUpdateTask = (task) => {\r\n        if (task.content === \"\") return;\r\n\r\n        updateTodo(task).then((response) => {\r\n            setList(\r\n                list.map((x) => (x.id === response.id ? {...x, ...response} : x))\r\n            );\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        handleLoadTasks();\r\n    }, []);\r\n\r\n    if (list === null) {\r\n        return <div>Tasks is loading ...</div>;\r\n    }\r\n\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n\r\n    // addTask(newitem)\r\n    // {\r\n    //     var allTask = this.state.list;\r\n    //     allTask.push(newitem);\r\n    //     this.setState({\r\n    //         list: allTask\r\n    //     });\r\n    // }\r\n    //\r\n    // updateFinished(todoItem)\r\n    // {\r\n    //     var sum = 0;\r\n    //     this.state.list.forEach((item) => {\r\n    //         if (item.id === todoItem.id) {\r\n    //             item.content = todoItem.content;\r\n    //         }\r\n    //         sum++;\r\n    //     });\r\n    //     this.setState({\r\n    //         finished: sum\r\n    //     });\r\n    // }\r\n    //\r\n    // updateTotal(todoItem)\r\n    // {\r\n    //     var obj = [], sum = 0;\r\n    //     this.state.list.forEach((item) => {\r\n    //         if (item.id !== todoItem.id) {\r\n    //             obj.push(item);\r\n    //             sum++;\r\n    //         }\r\n    //     });\r\n    //     this.setState({\r\n    //         list: obj,\r\n    //         finished: sum\r\n    //     });\r\n    // }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1>TodoList</h1>\r\n            <ul className=\"task-items\">\r\n                {this.state.list.map((item, index) =>\r\n                    <ListItem\r\n                        item={item}\r\n                        finishedChange={this.updateFinished.bind(this)}\r\n                        totalChange={this.updateTotal.bind(this)}\r\n                        key={index}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <Dialog addNewTask={handleAddTask()}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}